#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Standart, System and Third party
import serial
import tempfile
from datetime import datetime

# ROS
import rospy
from std_msgs.msg import String
from std_srvs.srv import Empty

# AIRA
from robonomics_msgs.msg import Result
from ipfs_common.msg import Multihash
from ethereum_common.msg import Address
from ipfsapi import connect


class WorkerNode:
    def __init__(self):
        rospy.init_node('worker')
        rospy.loginfo('Launching worker node...')

        device = rospy.get_param('~device', '/dev/ttyUSB0')
        rospy.loginfo('Waspmote starting with ' + device + '...')
        self.waspmote = serial.Serial(device, 115200)

        self.liability = rospy.get_param("~liability")
        if self.liability == "":
            rospy.logerr("Liability address must be specified!")
            exit(1)

        self.result_pub = rospy.Publisher('/liability/infochan/eth/signing/result', Result, queue_size=128)
        self.sensor = rospy.get_param("~sensor")
        self.limit = float(rospy.get_param("~limit"))

        rospy.loginfo('Worker node launched.')

    def extract_value(self, data: str) -> float:
        '''
        Example:
            data = "<=>\x86#5E1567057C105409#DOV01SW#0#WT:24.58#PH:2.62#DO:-4.2#COND:50.9#"

            after split
            part = "2.62#DO:-4.2#COND:50.9#"

            after split
            value = "2.62"
        '''
        try:
            part = data.split(self.sensor + ':')[1]
            value = part.split('#')[0]
        except:
            return float(0)
        return float(value)

    def send_result(self, filename: str):
        ipfsclient = connect(rospy.get_param('/liability/infochan/ipfs_channel/ipfs_http_provider'))

        response = ipfsclient.add(filename)
        res = Result()
        res.liability = Multihash(self.liability)
        res.result = response['Hash']
        res.success = True

        rospy.loginfo(res)

        self.result_pub.publish(res)

    def spin(self):
        logfile = tempfile.NamedTemporaryFile(mode='w+', delete=False)
        while True:
            try:
                data = self.waspmote.readline().decode('ascii', 'backslashreplace') # read '\n' terminated line
                rospy.loginfo(data)
                logfile.write(str(datetime.now().timestamp()) + ' ' + str(data))

                sensor_value = self.extract_value(data)

                if sensor_value >= self.limit:
                    self.send_result(logfile.name)

            except KeyboardInterrupt:
                exit(0)
            except Exception as e:
                rospy.logerr('Reading error: ', e)

if __name__ == '__main__':
    WorkerNode().spin()

