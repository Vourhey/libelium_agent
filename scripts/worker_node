#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Standart, System and Third party
from collections import namedtuple
from queue import Queue
from threading import Thread
import serial

# ROS
import rospy
from std_msgs.msg import String
from std_srvs.srv import Empty

# AIRA
from robonomics_msgs.msg import Result
from robonomics_liability.msg import Liability


class WorkerNode:
    def __init__(self):
        rospy.init_node('worker')
        rospy.loginfo('Launching worker node...')

        device = rospy.get_param('~device', '/dev/ttyUSB0')
        rospy.loginfo('Waspmote starting with ' + device + '...')
        self.waspmote = serial.Serial(device, 115200)

        self.result_pub = rospy.Publisher('/liability/infochan/eth/signing/result', Result, queue_size=128)

        rospy.loginfo('Worker node launched.')

    def spin(self):
        while True:
            try:
                data = self.waspmote.readline().decode('ascii', 'backslashreplace') # read '\n' terminated line
                rospy.loginfo(data)
            except KeyboardInterrupt:
                exit(0)
            except Exception as e:
                rospy.logerr('Reading error: ', e)

if __name__ == '__main__':
    WorkerNode().spin()

